Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:

SELECT COUNT (*)
FROM Table

i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000

2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

SELECT COUNT (DISTINCT(key))

i. Business = id, 10000
ii. Hours = business_id, 1562
iii. Category = business_id, 2643
iv. Attribute = business_id, 1115
v. Review = id, 10000; business_id, 8090; user_id, 9581
vi. Checkin = business_id, 493
vii. Photo = id, 10000; business_id, 6493
viii. Tip = user_id, 537; business_id, 3979
ix. User = id, 10000
x. Friend = user_id, 11
xi. Elite_years = user_id, 2780

3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	
	SQL code used to arrive at answer:

SELECT COUNT(*)
FROM user
WHERE id IS NULL OR 
		  name IS NULL OR 
		  average_stars IS NULL OR 
		  review_count IS NULL OR 
		  yelping_since IS NULL OR
		  funny IS NULL OR 
		  cool IS NULL OR 
		  fans IS NULL OR 
		  useful IS NULL OR 
		  compliment_hot IS NULL OR 
		  compliment_more IS NULL OR 
		  compliment_profile IS NULL OR 
		  compliment_cute IS NULL OR 
		  compliment_photos IS NULL 
		  compliment_note IS NULL OR 
		  compliment_plain IS NULL OR 
		  compliment_cool IS NULL OR 
		  compliment_list IS NULL OR 
		  compliment_funny IS NULL OR 
		  compliment_writer IS NULL OR 
		  
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

SELECT AVG(column)
FROM table

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1 		max: 5		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000		avg: 24.2995


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

	SELECT city, 
	SUM(review_count) AS review_tot
	FROM business
	GROUP BY city
	ORDER BY review_tot DESC
	
	Copy and Paste the Result Below:

		+-----------------+---------+
		| city            | reviews |
		+-----------------+---------+
		| Las Vegas       |   82854 |
		| Phoenix         |   34503 |
		| Toronto         |   24113 |
		| Scottsdale      |   20614 |
		| Charlotte       |   12523 |
		| Henderson       |   10871 |
		| Tempe           |   10504 |
		| Pittsburgh      |    9798 |
		| Montréal        |    9448 |
		| Chandler        |    8112 |
		| Mesa            |    6875 |
		| Gilbert         |    6380 |
		| Cleveland       |    5593 |
		| Madison         |    5265 |
		| Glendale        |    4406 |
		| Mississauga     |    3814 |
		| Edinburgh       |    2792 |
		| Peoria          |    2624 |
		| North Las Vegas |    2438 |
		| Markham         |    2352 |
		| Champaign       |    2029 |
		| Stuttgart       |    1849 |
		| Surprise        |    1520 |
		| Lakewood        |    1465 |
		| Goodyear        |    1155 |
		+-----------------+---------+

6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT stars, 
	SUM(review_count) AS count_tot
FROM business
WHERE city == 'Avon'
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):


			+-------+-------+
			| stars | count |
			+-------+-------+
			|   1.5 |    10 |
			|   2.5 |     6 |
			|   3.5 |    88 |
			|   4.0 |    21 |
			|   4.5 |    31 |
			|   5.0 |     3 |
			+-------+-------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT stars, 
	SUM(review_count) AS count_tot
FROM business
WHERE city == 'Beachwood'
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
		
			+-------+-------+
			| stars | count |
			+-------+-------+
			|   2.0 |     8 |
			|   2.5 |     3 |
			|   3.0 |    11 |
			|   3.5 |     6 |
			|   4.0 |    69 |
			|   4.5 |    17 |
			|   5.0 |    23 |
			+-------+-------+



7. Find the top 3 users based on their total number of reviews:

SQL code used to arrive at answer:
SELECT id, name, review_count
FROM user
ORDER BY review_count DESC
LIMIT 3

Copy and Paste the Result Below:
		+------------------------+--------+--------------+
		| id                     | name   | review_count |
		+------------------------+--------+--------------+
		| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
		| -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
		| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
		+------------------------+--------+--------------+


8. Does posing more reviews correlate with more fans?

Please explain your findings and interpretation of the results:

Intuitively, the longer a person has been using yelp, the more reviews they have and the higher amount of fans they have. So yes and no - there are multiple factors affecting it. 

SELECT id, name, review_count, yelping_since, fans
FROM user
ORDER BY fans DESC

		+------------------------+-----------+--------------+------+---------------------+
		| id                     | name      | review_count | fans | yelping_since       |
		+------------------------+-----------+--------------+------+---------------------+
		| -9I98YbNQnLdAmcYfb324Q | Amy       |          609 |  503 | 2007-07-19 00:00:00 |
		| -8EnCioUmDygAbsYZmTeRQ | Mimi      |          968 |  497 | 2011-03-30 00:00:00 |
		| --2vR0DIsmQ6WfcSzKWigw | Harald    |         1153 |  311 | 2012-11-27 00:00:00 |
		| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |         2000 |  253 | 2012-12-16 00:00:00 |
		| -0IiMAZI2SsQ7VmyzJjokQ | Christine |          930 |  173 | 2009-07-08 00:00:00 |
		| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |          813 |  159 | 2009-10-05 00:00:00 |
		| -9bbDysuiWeo2VShFJJtcw | Cat       |          377 |  133 | 2009-02-05 00:00:00 |
		| -FZBTkAZEXoP7CYvRV2ZwQ | William   |         1215 |  126 | 2015-02-19 00:00:00 |
		| -9da1xk7zgnnfO1uTVYGkA | Fran      |          862 |  124 | 2012-04-05 00:00:00 |
		| -lh59ko3dxChBSZ9U7LfUw | Lissa     |          834 |  120 | 2007-08-14 00:00:00 |
		| -B-QEUESGWHPE_889WJaeg | Mark      |          861 |  115 | 2009-05-31 00:00:00 |
		| -DmqnhW4Omr3YhmnigaqHg | Tiffany   |          408 |  111 | 2008-10-28 00:00:00 |
		| -cv9PPT7IHux7XUc9dOpkg | bernice   |          255 |  105 | 2007-08-29 00:00:00 |
		| -DFCC64NXgqrxlO8aLU5rg | Roanna    |         1039 |  104 | 2006-03-28 00:00:00 |
		| -IgKkE8JvYNWeGu8ze4P8Q | Angela    |          694 |  101 | 2010-10-01 00:00:00 |
		| -K2Tcgh2EKX6e6HqqIrBIQ | .Hon      |         1246 |  101 | 2006-07-19 00:00:00 |
		| -4viTt9UC44lWCFJwleMNQ | Ben       |          307 |   96 | 2007-03-10 00:00:00 |
		| -3i9bhfvrM3F1wsC9XIB8g | Linda     |          584 |   89 | 2005-08-07 00:00:00 |
		| -kLVfaJytOJY2-QdQoCcNQ | Christina |          842 |   85 | 2012-10-08 00:00:00 |
		| -ePh4Prox7ZXnEBNGKyUEA | Jessica   |          220 |   84 | 2009-01-12 00:00:00 |
		| -4BEUkLvHQntN6qPfKJP2w | Greg      |          408 |   81 | 2008-02-16 00:00:00 |
		| -C-l8EHSLXtZZVfUAUhsPA | Nieves    |          178 |   80 | 2013-07-08 00:00:00 |
		| -dw8f7FLaUmWR7bfJ_Yf0w | Sui       |          754 |   78 | 2009-09-07 00:00:00 |
		| -8lbUNlXVSoXqaRRiHiSNg | Yuri      |         1339 |   76 | 2008-01-03 00:00:00 |
		| -0zEEaDFIjABtPQni0XlHA | Nicole    |          161 |   73 | 2009-04-30 00:00:00 |
		+------------------------+-----------+--------------+------+---------------------+


9. Are there more reviews with the word "love" or with the word "hate" in them?

Answer: 
1780 occurences of love, 232 occurences of hate


SQL code used to arrive at answer:

SELECT COUNT(*)
FROM review
WHERE text LIKE '%love%'

SELECT COUNT(*)
FROM review
WHERE text LIKE '%hate%'



10. Find the top 10 users with the most fans:

SQL code used to arrive at answer:

SELECT id, name, fans
FROM user
ORDER BY fans DESC
LIMIT 10

	Copy and Paste the Result Below:
+------------------------+-----------+------+
| id                     | name      | fans |
+------------------------+-----------+------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
+------------------------+-----------+------+

11. Is there a strong relationship (or correlation) between having a high number of fans and being listed as "useful" or "funny?" Out of the top 10 users with the highest number of fans, what percent are also listed as “useful” or “funny”?

Key:
0% - 25% - Low relationship
26% - 75% - Medium relationship
76% - 100% - Strong relationship
	
	SQL code used to arrive at answer:
	
	
SELECT name, fans, useful, funny, yelping_since, review_count
FROM user
ORDER BY fans DESC
LIMIT 10

	Copy and Paste the Result Below:
	
+-----------+------+--------+--------+---------------------+--------------+
| name      | fans | useful |  funny | yelping_since       | review_count |
+-----------+------+--------+--------+---------------------+--------------+
| Amy       |  503 |   3226 |   2554 | 2007-07-19 00:00:00 |          609 |
| Mimi      |  497 |    257 |    138 | 2011-03-30 00:00:00 |          968 |
| Harald    |  311 | 122921 | 122419 | 2012-11-27 00:00:00 |         1153 |
| Gerald    |  253 |  17524 |   2324 | 2012-12-16 00:00:00 |         2000 |
| Christine |  173 |   4834 |   6646 | 2009-07-08 00:00:00 |          930 |
| Lisa      |  159 |     48 |     13 | 2009-10-05 00:00:00 |          813 |
| Cat       |  133 |   1062 |    672 | 2009-02-05 00:00:00 |          377 |
| William   |  126 |   9363 |   9361 | 2015-02-19 00:00:00 |         1215 |
| Fran      |  124 |   9851 |   7606 | 2012-04-05 00:00:00 |          862 |
| Lissa     |  120 |    455 |    150 | 2007-08-14 00:00:00 |          834 |
+-----------+------+--------+--------+---------------------+--------------+

Please explain your findings and interpretation of the results:

There does to be some correlation between being listed as 'useful' or 'funny' and having a high number of fans. However, the time they had been yelping since and how many reviews they have had do have an impact as well. I'm not sure how to answer the last part of the question. 100% of the top 10 fans are listed as useful or funny. 

Part 2: Inferences and Analysis
1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.


i. Do the two groups you chose to analyze have a different distribution of hours?
	The place with longer hours have lower ratings that those with shorter hours. I only had an output of 2 'food' places so this is not the best sample size to analyze.

ii. Do the two groups you chose to analyze have a different number of reviews?
	The place with higher ratings had a higher amount of reviews.

iii. Are you able to infer anything from the location data provided between these two
		groups? Explain.
		Not really as the zip codes are different and the types of 'food' places are different. 

SQL code used for analysis:
SELECT A.name, A.review_count, H.hours, postal_code, city, state,
CASE
		WHEN hours LIKE "%monday%" THEN 1
		WHEN hours LIKE "%tuesday%" THEN 2
		WHEN hours LIKE "%wednesday%" THEN 3
		WHEN hours LIKE "%thursday%" THEN 4
		WHEN hours LIKE "%friday%" THEN 5
		WHEN hours LIKE "%saturday%" THEN 6
		WHEN hours LIKE "%sunday%" THEN 7
END AS days,
CASE
		WHEN A.stars BETWEEN 2 AND 3 THEN '2-3 stars'
		WHEN A.stars BETWEEN 4 AND 5 THEN '4-5 stars'
END AS star_rating
FROM business A INNER JOIN hours H
  ON A.id = H.business_id
INNER JOIN category B
  ON B.business_id = A.id
WHERE (A.city == 'Phoenix'
	AND B.category LIKE 'Food')
	AND (A.stars BETWEEN 2 AND 3 OR A.stars BETWEEN 4 AND 5)
GROUP BY stars, days
ORDER BY days, star_rating ASC

2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
    There is a major difference between the amount of reviews, average amount of reviews and stars. The average review count for open businesses is 31.75 and for closed businesses is 23.198.   

         
ii. Difference 2:
     The average stars for open is 3.67 and for closed is 3.52. The amount of reviews is also higher for open businesses (269300) than for closed busiensses (35261).
         
         
SQL code used for analysis:

SELECT COUNT(DISTINCT(id)), AVG(stars), AVG(review_count), SUM(review_count), is_open
FROM business
GROUP BY is_open

+---------------------+---------------+-------------------+-------------------+---------+
| COUNT(DISTINCT(id)) |    AVG(stars) | AVG(review_count) | SUM(review_count) | is_open |
+---------------------+---------------+-------------------+-------------------+---------+
|                1520 | 3.52039473684 |     23.1980263158 |             35261 |       0 |
|                8480 | 3.67900943396 |     31.7570754717 |            269300 |       1 |
+---------------------+---------------+-------------------+-------------------+---------+

3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
I want to analyze the distribution of yelper's who are categorized as 'cool' who have more than 1000 reviews and then order them by the amount of 'cool' votes they get. 

ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
I will need to revtrieve data from the 'user' portion and then select the categories I wish to examine. This is interesting to see as comparing it to the amount of reviews they have, the last person Eric, has 0 cool votes but over 1000 reviews. Harald has the highest cool votes and yes only started yelping recently. 
                            
                  
iii. Output of your finished dataset:
+---------+------+--------+---------------------+--------------+
| name    | fans |   cool | yelping_since       | review_count |
+---------+------+--------+---------------------+--------------+
| Harald  |  311 | 122890 | 2012-11-27 00:00:00 |         1153 |
| Gerald  |  253 |  15008 | 2012-12-16 00:00:00 |         2000 |
| William |  126 |   9370 | 2015-02-19 00:00:00 |         1215 |
| .Hon    |  101 |   5104 | 2006-07-19 00:00:00 |         1246 |
| Roanna  |  104 |    636 | 2006-03-28 00:00:00 |         1039 |
| Yuri    |   76 |    561 | 2008-01-03 00:00:00 |         1339 |
| Sara    |   50 |      2 | 2010-05-16 00:00:00 |         1629 |
| eric    |   16 |      0 | 2007-05-27 00:00:00 |         1116 |
+---------+------+--------+---------------------+--------------+
         
iv. Provide the SQL code you used to create your final dataset:

SELECT name, fans, cool, yelping_since, review_count
FROM user
ORDER BY cool DESC
